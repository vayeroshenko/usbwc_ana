//my
#include "wfSim.hh"

//root
#include "TRandom3.h"
#include "TCanvas.h"
#include "TGraph.h"

//C, C++
#include <iostream>
#include <fstream>
#include <assert.h>
#include <iomanip>

using namespace std;

// 0.0<digitTime0<5.0
wfSim::wfSim(TRandom3 *rnd, int nDigitPoint, double dTimeDigit, double digitTime0){
  //cout<<"wfSim::wfSim()"<<endl;//
  //_maxDigitPoint = 100000;
  //if(_nDigitPoint>_maxDigitPoint){
  //cout<<"ERROR --> _nDigitPoint>_maxDigitPoint "<<endl
  //<<"          _nDigitPoint   = "<<_nDigitPoint<<endl 
  //<<"          _maxDigitPoint = "<<_maxDigitPoint<<endl;
  //assert(0);
  //}
  _nDigitPoint = nDigitPoint;
  _rnd = rnd;
  _digitTime0 = digitTime0;
  _dTimeDigit = dTimeDigit;
  _wfT = new double[_nDigitPoint];
  _wfA = new double[_nDigitPoint];
  for( Int_t i = 0; i<_nDigitPoint; i++){
    _wfT[i] = 0.0;
    _wfA[i] = 0.0;
  }
  _nPiontsMcpPM_SP = 0;
  _nPiontsMcpPM_CT = 0;
  _nPiontsMcpPM_CS = 0;
  _constDelay = 10.0;

}

wfSim::~wfSim(){
  delete _wfT;
  delete _wfA;
}

void wfSim::CleanWf(){
  for( Int_t i = 0; i<_nDigitPoint; i++){
    //_wfT[i] = 0.0;
    _wfA[i] = 0.0;
  }
}

int wfSim::getLinearPointID( double x, double xxMin, double xxMax, int nPoints){
  if(nPoints<2){
    cout<<" ERROR --> nPoints<2 "<<endl
	<<"           nPoints = "<<nPoints<<endl;
    assert(0);
  }
  if(xxMin>=xxMax){
    cout<<" ERROR --> xxMin>=xxMax "<<endl
	<<"           xxMin = "<<xxMin<<endl
	<<"           xxMax = "<<xxMax<<endl;
    assert(0);
  }
  int iID = (int)floor((x-xxMin)/((xxMax - xxMin)/(nPoints-1)));
  if(iID < 0 || iID >= nPoints)
    return -999;
  return iID;
}

double wfSim::genAmplitudeDistMCPMPT_SP(){
  const int _nP_SP = 22;
  double _ampl_SP[_nP_SP];
  double _prob_SP[_nP_SP];
  _ampl_SP[0]=0.04225;  _prob_SP[0]=0;
  _ampl_SP[1]=0.06775;  _prob_SP[1]=171;
  _ampl_SP[2]=0.09325;  _prob_SP[2]=731;
  _ampl_SP[3]=0.11875;  _prob_SP[3]=803;
  _ampl_SP[4]=0.14425;  _prob_SP[4]=884;//
  _ampl_SP[5]=0.16975;  _prob_SP[5]=814;
  _ampl_SP[6]=0.19525;  _prob_SP[6]=750;
  _ampl_SP[7]=0.22075;  _prob_SP[7]=641;
  _ampl_SP[8]=0.24625;  _prob_SP[8]=549;
  _ampl_SP[9]=0.27175;  _prob_SP[9]=412;
  _ampl_SP[10]=0.29725; _prob_SP[10]=321;
  _ampl_SP[11]=0.32275; _prob_SP[11]=215;
  _ampl_SP[12]=0.34825; _prob_SP[12]=139;
  _ampl_SP[13]=0.37375; _prob_SP[13]=92;
  _ampl_SP[14]=0.39925; _prob_SP[14]=54;
  _ampl_SP[15]=0.42475; _prob_SP[15]=34;
  _ampl_SP[16]=0.45025; _prob_SP[16]=19;
  _ampl_SP[17]=0.47575; _prob_SP[17]=8;
  _ampl_SP[18]=0.50125; _prob_SP[18]=6;
  _ampl_SP[19]=0.52675; _prob_SP[19]=4;
  _ampl_SP[20]=0.55225; _prob_SP[20]=2;
  _ampl_SP[21]=0.57775; _prob_SP[21]=0;
  double xx;
  double yy;
  double accP;
  int i = 0;
  bool Ok = false;
  if(_nP_SP<2){
    cout<<" ERROR --> _nP_SP<2"<<endl
	<<"           _nP_SP = "<<_nP_SP<<endl;
    assert(0);
  }
  while(!Ok){
    xx = _rnd->Uniform( _ampl_SP[0], _ampl_SP[_nP_SP-1]);
    yy = _rnd->Uniform(     0.0,    _prob_SP[4]);
    for(i=0;i<(_nP_SP-1);i++){
      if(_ampl_SP[i]<=xx && _ampl_SP[i+1]>=xx ){
	accP = linInterpol(xx,_prob_SP[i+1],_prob_SP[i],_ampl_SP[i+1],_ampl_SP[i]);
	i = _nP_SP-1;
      }
    }
    if(yy<accP){
      Ok = true;
      return xx;
    }
  }
  return 0.0;
}

double wfSim::genAmplitudeDistMCPMPT_CT(){
  const int nP = 21;
  double ampl[nP];
  double prob[nP];
  ampl[0]=0.00825; prob[0]=0;
  ampl[1]=0.00995; prob[1]=389;
  ampl[2]=0.01165; prob[2]=786;//
  ampl[3]=0.01335; prob[3]=559;
  ampl[4]=0.01505; prob[4]=431;
  ampl[5]=0.01675; prob[5]=286;
  ampl[6]=0.01845; prob[6]=177;
  ampl[7]=0.02015; prob[7]=127;
  ampl[8]=0.02185; prob[8]=93;
  ampl[9]=0.02355; prob[9]=65;
  ampl[10]=0.02525; prob[10]=57;
  ampl[11]=0.02695; prob[11]=56;
  ampl[12]=0.02865; prob[12]=29;
  ampl[13]=0.03035; prob[13]=31;
  ampl[14]=0.03205; prob[14]=21;
  ampl[15]=0.03375; prob[15]=15;
  ampl[16]=0.03545; prob[16]=19;
  ampl[17]=0.03715; prob[17]=13;
  ampl[18]=0.03885; prob[18]=11;
  ampl[19]=0.04055; prob[19]=1;
  ampl[20]=0.04225; prob[20]=0;
  double xx;
  double yy;
  double accP;
  int i = 0;
  bool Ok = false;
  if(nP<2){
    cout<<" ERROR --> nP<2"<<endl
	<<"           nP = "<<nP<<endl;
    assert(0);
  }
  while(!Ok){
    xx = _rnd->Uniform( ampl[0], ampl[nP-1]);
    yy = _rnd->Uniform(     0.0,    prob[2]);
    for(i=0;i<(nP-1);i++){
      if(ampl[i]<=xx && ampl[i+1]>=xx ){
	accP = linInterpol(xx,prob[i+1],prob[i],ampl[i+1],ampl[i]);
	i = nP-1;
      }
    }
    if(yy<accP){
      Ok = true;
      return xx;
    }
  }
  return 0.0;
}

double wfSim::genAmplitudeDistMCPMPT_CS(){
  const int nP = 33;
  double ampl[nP];
  double prob[nP];
  ampl[0]=0.00825; prob[0]=0;
  ampl[1]=0.00995; prob[1]=149;
  ampl[2]=0.01165; prob[2]=301;
  ampl[3]=0.01335; prob[3]=270;
  ampl[4]=0.01505; prob[4]=229;
  ampl[5]=0.01675; prob[5]=197;
  ampl[6]=0.01845; prob[6]=150;
  ampl[7]=0.02015; prob[7]=138;
  ampl[8]=0.02185; prob[8]=127;
  ampl[9]=0.02355; prob[9]=108;
  ampl[10]=0.02525; prob[10]=97;
  ampl[11]=0.02695; prob[11]=83;
  ampl[12]=0.02865; prob[12]=69;
  ampl[13]=0.03035; prob[13]=56;
  ampl[14]=0.03205; prob[14]=52;
  ampl[15]=0.03375; prob[15]=39;
  ampl[16]=0.03545; prob[16]=34;
  ampl[17]=0.03715; prob[17]=31;
  ampl[18]=0.03885; prob[18]=29;
  ampl[19]=0.04055; prob[19]=27;
  ampl[20]=0.04225; prob[20]=25;
  ampl[21]=0.04395; prob[21]=23;
  ampl[22]=0.04565; prob[22]=16;
  ampl[23]=0.04735; prob[23]=17;
  ampl[24]=0.04905; prob[24]=18;
  ampl[25]=0.05075; prob[25]=24;
  ampl[26]=0.05245; prob[26]=14;
  ampl[27]=0.05415; prob[27]=20;
  ampl[28]=0.05585; prob[28]=14;
  ampl[29]=0.05755; prob[29]=15;
  ampl[30]=0.05925; prob[30]=11;
  ampl[31]=0.06095; prob[31]=5;
  ampl[32]=0.06265; prob[32]=0;
  double xx;
  double yy;
  double accP;
  int i = 0;
  bool Ok = false;
  if(nP<2){
    cout<<" ERROR --> nP<2"<<endl
	<<"           nP = "<<nP<<endl;
    assert(0);
  }
  while(!Ok){
    xx = _rnd->Uniform( ampl[0], ampl[nP-1]);
    yy = _rnd->Uniform(     0.0,    prob[2]);
    for(i=0;i<(nP-1);i++){
      if(ampl[i]<=xx && ampl[i+1]>=xx ){
	accP = linInterpol(xx,prob[i+1],prob[i],ampl[i+1],ampl[i]);
	i = nP-1;
      }
    }
    if(yy<accP){
      Ok = true;
      return xx;
    }
  }
  return 0.0;
}

void wfSim::SetIdealShape_SP(int nPiontsMcpPM_SP, double *xxMcpPM_SP, 
			     double *yyMcpPM_SP, double timeMax_SP){
  _nPiontsMcpPM_SP = nPiontsMcpPM_SP;
  _xxMcpPM_SP = xxMcpPM_SP;
  _yyMcpPM_SP = yyMcpPM_SP;
  _timeMax_SP = timeMax_SP;
  //for(int i = 0;i<nPiontsMcpPM_SP;i++){
  //cout<<setw(20)<<_xxMcpPM_SP[i]<<setw(20)<<_yyMcpPM_SP[i]<<endl;
  //}
}

void wfSim::SetIdealShape_CT(int nPiontsMcpPM_CT, double *xxMcpPM_CT,
			     double *yyMcpPM_CT, double timeMax_CT){
  _nPiontsMcpPM_CT = nPiontsMcpPM_CT;
  _xxMcpPM_CT = xxMcpPM_CT;
  _yyMcpPM_CT = yyMcpPM_CT;
  _timeMax_CT = timeMax_CT;
}

void wfSim::SetIdealShape_CS(int nPiontsMcpPM_CS, double *xxMcpPM_CS,
			     double *yyMcpPM_CS, double timeMax_CS){
  _nPiontsMcpPM_CS = nPiontsMcpPM_CS;
  _xxMcpPM_CS = xxMcpPM_CS;
  _yyMcpPM_CS = yyMcpPM_CS;
  _timeMax_CS = timeMax_CS;
}

void wfSim::genMCPPMT_SP_WF( double timeTrue){
  int i = 0;
  double x;
  double ampl = genAmplitudeDistMCPMPT_SP();
  timeTrue = timeTrue + _constDelay;
  for( i = 0; i<_nDigitPoint; i++){
    _wfT[i] = _dTimeDigit*i;
    x = _wfT[i] + _digitTime0;
    _wfA[i] = _wfA[i] + mcpPMShapeSP( x, timeTrue)*ampl;
    //_wfA[i] = _wfA[i] + 1.0;
    //if(_wfA[i]>1.0)
    //cout<<_wfA[i]<<endl;
  }
}

void wfSim::genMCPPMT_CT_WF( double timeTrue){
  int i = 0;
  double x;
  double ampl = genAmplitudeDistMCPMPT_CT();
  timeTrue = timeTrue + _constDelay;
  for( i = 0; i<_nDigitPoint; i++){
    _wfT[i] = _dTimeDigit*i;
    x = _wfT[i] + _digitTime0;
    _wfA[i] = _wfA[i] + mcpPMShapeCT( x, timeTrue)*ampl;
  }
}

void wfSim::genMCPPMT_CS_WF( double timeTrue){
  int i = 0;
  double x;
  double ampl = genAmplitudeDistMCPMPT_CS();
  timeTrue = timeTrue + _constDelay;
  //cout<<"_nDigitPoint "<<_nDigitPoint<<endl;
  for( i = 0; i<_nDigitPoint; i++){
    _wfT[i] = _dTimeDigit*i;
    x = _wfT[i] + _digitTime0;
    _wfA[i] = _wfA[i] + mcpPMShapeCS( x, timeTrue)*ampl;
    //cout<<"i "<<i<<endl;
  }
}

void wfSim::genTriangleWF( double timeTrue, double basis){
  int i = 0;
  double x;
  double ampl = genAmplitudeDistGauss(0.4, 0.05);
  timeTrue = timeTrue + 10.0;
  for( i = 0; i<_nDigitPoint; i++){
    _wfT[i] = _dTimeDigit*i;
    x = _wfT[i] + _digitTime0;
    _wfA[i] = _wfA[i] + triangleShape( x, timeTrue, basis)*ampl;
  }
}

void wfSim::genNinoWF( double timeTrue, double amplitude, double width){
  int i = 0;
  double x;
  double ampl = 1.0;
  double k = 4.0;
  double xL = timeTrue;
  double xR = timeTrue + width;
  timeTrue = timeTrue + 10.0;
  for( i = 0; i<_nDigitPoint; i++){
    _wfT[i] = _dTimeDigit*i;
    x = _wfT[i] + _digitTime0;
    _wfA[i] = _wfA[i] + amplitude/(TMath::Exp(k*(xL-x)) + 1.0)/(TMath::Exp(-k*(xR-x)) + 1.0);
    //_wfA[i] = _wfA[i] + amplitude/(TMath::Exp(k*(xL-x)) + 1.0);
    //cout<<_wfA[i]<<endl;
  }
}

void wfSim::genGaussWF( double timeTrue, double sigma){
  int i = 0;
  double x;
  //LB 09.02.2011
  //test was proposed by Achille (parametrisation of the global crosstalk)
  //double ampl = genAmplitudeDistGauss(0.2, 0.05);  
  //double ampl = _rnd->Uniform(-0.005,0.0);
  //double ampl = _rnd->Uniform(0.0,1.0);
  double ampl = 0.2;
  timeTrue = timeTrue + 10.0;
  for( i = 0; i<_nDigitPoint; i++){
    _wfT[i] = _dTimeDigit*i;
    x = _wfT[i] + _digitTime0;
    _wfA[i] = _wfA[i] + TMath::Gaus( x, timeTrue, sigma)*ampl;
    //cout<<_wfA[i]<<endl;
  }
}

void wfSim::Draw(){
  Double_t amplMax =  1.2;
  Double_t amplMin = -0.2;

  TCanvas *c1 = new TCanvas("c1","wavefor",10,10,1000,800);
  c1->SetFillColor(kWhite);

  TGraph *gr1 = new TGraph( _nDigitPoint, _wfT, _wfA); 

  gr1->SetMaximum(amplMax);
  gr1->SetMinimum(amplMin);

  gr1->SetMarkerStyle(20);
  gr1->SetMarkerSize(1);

  gr1->Draw("APL");

  //gr1->SaveAs("wfSim_wf.C");

}
//gaussian
//double wfSim::getRealAmplitude( double tt, double meanT){
//double aa = TMath::Gaus( tt, meanT, 0.5);
//if(usbConst::rmsOfTheNoise>0.0)
//aa = aa + _rnd->Gaus(0.0,usbConst::rmsOfTheNoise);
//if(aa< 1.0e-20)
//aa = 0.0;
//return aa;
//}

//triangle
double wfSim::triangleShape( double tt, double timeTrue, double basis){
  double meanT = timeTrue;

  double aa = 0.0;

  double kk = -999.0;
  double bb = -999.0;

  if( basis <= 0.0){
    cout<<"basis <= 0.0"<<endl
	<<"basis  = "<<basis<<endl;
    assert(0);
  }
  
  if( tt < (meanT - basis/2.0) || tt > (meanT + basis/2.0) ){
    kk = 0.0;
    bb = 0.0;
  }
  else if(tt >= (meanT - basis/2.0) && tt <= meanT){
    kk = 2.0/basis;
    bb = 1 - 2.0*meanT/basis;
  }
  else if(tt <= (meanT + basis/2.0) && tt >= meanT){
    kk = -2.0/basis;
    bb = 1 + 2.0*meanT/basis;  
  }
  aa = kk*tt + bb;

  return aa;
}

double wfSim::genAmplitudeDistGauss(double meanA, double rmsA){
  return TMath::Abs(_rnd->Gaus( meanA, rmsA));
}

void wfSim::generateNoiseGauss(double noiseRMS){
  for( int i = 0; i<_nDigitPoint; i++){
    _wfA[i] = _wfA[i] + _rnd->Gaus(0.0,noiseRMS);
  }
}

double wfSim::mcpPMShapeSP( double x, double timeTrue){
  if(_nPiontsMcpPM_SP < 2 ){
    cout<<" ERROR--> _nPiontsMcpPM_SP  < 2 "<<endl;
    assert(0);
  }
  x = (x-timeTrue) + _timeMax_SP;
  double xxMin = _xxMcpPM_SP[0];
  double xxMax = _xxMcpPM_SP[(_nPiontsMcpPM_SP-1)];
  if(x<=xxMin){
    return 0.0;
  }
  else if(x>=xxMax){
    return 0.0;
  }
  else{
    //for(int i = 0;i<(_nPiontsMcpPM_SP-1);i++){
    int i = getLinearPointID( x, xxMin, xxMax, _nPiontsMcpPM_SP);
    if(i!=-999){
      if(x>=_xxMcpPM_SP[i] && x<=_xxMcpPM_SP[i+1]){
	//cout<<linInterpol( x, _yyMcpPM_SP[i+1], _yyMcpPM_SP[i], _xxMcpPM_SP[i+1], _xxMcpPM_SP[i])<<endl;
	//return _yyMcpPM_SP[100];
	return linInterpol( x, _yyMcpPM_SP[i+1], _yyMcpPM_SP[i], _xxMcpPM_SP[i+1], _xxMcpPM_SP[i]);
	//}
      }
      else if((i-1)>=0 && (i+1)<_nPiontsMcpPM_SP){
	if(x>=_xxMcpPM_SP[i-1] && x<=_xxMcpPM_SP[i])
	  return linInterpol( x, _yyMcpPM_SP[i], _yyMcpPM_SP[i-1], _xxMcpPM_SP[i], _xxMcpPM_SP[i-1]);
	if(x>=_xxMcpPM_SP[i+1] && x<=_xxMcpPM_SP[i+2])
	  return linInterpol( x, _yyMcpPM_SP[i+2], _yyMcpPM_SP[i+1], _xxMcpPM_SP[i+2], _xxMcpPM_SP[i+1]);	
      }
      else if(i==0){
	if(TMath::Abs(x-_xxMcpPM_SP[1])<(_xxMcpPM_SP[1] - _xxMcpPM_SP[0])/100.0)
	  return _yyMcpPM_SP[1];
      }
      else{
	cout<<"  i                = "<<i<<endl
	    <<"  x                = "<<x<<endl
	    <<"  _xxMcpPM_SP[i]   = "<<_xxMcpPM_SP[i]<<endl
	    <<"  _xxMcpPM_SP[i+1] = "<<_xxMcpPM_SP[i+1]<<endl;
	assert(0);
      }
    }
  }
  return 0.0;
}

double wfSim::mcpPMShapeCT( double x, double timeTrue){
  if(_nPiontsMcpPM_CT == 0 ){
    cout<<" ERROR--> _nPiontsMcpPM_CT == 0 "<<endl;
    assert(0);
  }
  double xxMin = _xxMcpPM_CT[0];
  double xxMax = _xxMcpPM_CT[(_nPiontsMcpPM_CT-1)];
  x = (x-timeTrue) + _timeMax_CT;
  if(x<xxMin){
    return 0.0;
  }
  else if(x>xxMax){
    return 0.0;
  }
  else{
    //for(int i = 0;i<(_nPiontsMcpPM_SP-1);i++){
    int i = getLinearPointID( x, xxMin, xxMax, _nPiontsMcpPM_CT);
    if(i!=-999){
      if(x>=_xxMcpPM_CT[i] && x<=_xxMcpPM_CT[i+1]){
	return linInterpol( x, _yyMcpPM_CT[i+1], _yyMcpPM_CT[i], _xxMcpPM_CT[i+1], _xxMcpPM_CT[i]);
      }
      else if((i-1)>=0 && (i+1)<_nPiontsMcpPM_CT){
	if(x>=_xxMcpPM_CT[i-1] && x<=_xxMcpPM_CT[i])
	  return linInterpol( x, _yyMcpPM_CT[i], _yyMcpPM_CT[i-1], _xxMcpPM_CT[i], _xxMcpPM_CT[i-1]);
	if(x>=_xxMcpPM_CT[i+1] && x<=_xxMcpPM_CT[i+2])
	  return linInterpol( x, _yyMcpPM_CT[i+2], _yyMcpPM_CT[i+1], _xxMcpPM_CT[i+2], _xxMcpPM_CT[i+1]);	
      }
      else if(i==0){
	if(TMath::Abs(x-_xxMcpPM_CT[1])<(_xxMcpPM_CT[1] - _xxMcpPM_CT[0])/100.0)
	  return _yyMcpPM_CT[1];
      }
      else{
	cout<<"  i                = "<<i<<endl
	    <<"  x                = "<<x<<endl
	    <<"  _xxMcpPM_CT[i]   = "<<_xxMcpPM_CT[i]<<endl
	    <<"  _xxMcpPM_CT[i+1] = "<<_xxMcpPM_CT[i+1]<<endl;
	assert(0);
      }
    }
  }
  return 0.0;
}

double wfSim::mcpPMShapeCS( double x, double timeTrue){
  if(_nPiontsMcpPM_CS == 0 ){
    cout<<" ERROR--> _nPiontsMcpPM_CS == 0 "<<endl;
    assert(0);
  }
  double xxMin = _xxMcpPM_CS[0];
  double xxMax = _xxMcpPM_CS[(_nPiontsMcpPM_CS-1)];
  x = (x-timeTrue) + _timeMax_CS;
  if(x<xxMin){
    return 0.0;
  }
  else if(x>xxMax){
    return 0.0;
  }
  else{
    int i = getLinearPointID( x, xxMin, xxMax, _nPiontsMcpPM_CS);
    if(i!=-999){
      if(x>=_xxMcpPM_CS[i] && x<=_xxMcpPM_CS[i+1]){
	return linInterpol( x, _yyMcpPM_CS[i+1], _yyMcpPM_CS[i], _xxMcpPM_CS[i+1], _xxMcpPM_CS[i]);
      }
      else if((i-1)>=0 && (i+1)<_nPiontsMcpPM_CS){
	if(x>=_xxMcpPM_CS[i-1] && x<=_xxMcpPM_CS[i])
	  return linInterpol( x, _yyMcpPM_CS[i], _yyMcpPM_CS[i-1], _xxMcpPM_CS[i], _xxMcpPM_CS[i-1]);
	if(x>=_xxMcpPM_CS[i+1] && x<=_xxMcpPM_CS[i+2])
	  return linInterpol( x, _yyMcpPM_CS[i+2], _yyMcpPM_CS[i+1], _xxMcpPM_CS[i+2], _xxMcpPM_CS[i+1]);	
      }
      else if(i==0){
	if(TMath::Abs(x-_xxMcpPM_CS[1])<(_xxMcpPM_CS[1] - _xxMcpPM_CS[0])/100.0)
	  return _yyMcpPM_CS[1];
      }
      else{
	cout<<"  i                = "<<i<<endl
	    <<"  x                = "<<x<<endl
	    <<"  _xxMcpPM_CS[i]   = "<<_xxMcpPM_CS[i]<<endl
	    <<"  _xxMcpPM_CS[i+1] = "<<_xxMcpPM_CS[i+1]<<endl;
	assert(0);
      }
    }
  }
  return 0.0;
}

double wfSim::linInterpol( double x, double y2, double y1, double x2, double x1){
  double dx = (x1-x2);
  if(dx==0.0 || x2<x1){
    cout<<endl<<" ERROR--> x2<x1 || (x1 - x2)==0.0"<<endl
	<<" x1 = "<<x1<<endl
	<<" x2 = "<<x2<<endl
	<<" y1 = "<<y1<<endl
	<<" y2 = "<<y2<<endl;
    assert(0);
  }
  double k = (y1 - y2)/(x1-x2);
  double b = y1 - k*x1;
  if((y1 - y2)==0.0){
    //cout<<"  Warning --> (y1 - y2)==0.0 in wfSim::linInterpol"<<endl;
    return y1;
  }
  return (k*x + b);
}


/*
double wfSim::getRealAmplitudePMT( double x, double meanT){
   x = x - meanT;
   const int fNp = 256, fKstep = 0;
   const double fDelta = -1, fXmin = -6.875, fXmax = 72.8125;
   const double fX[256] = { -6.875, -6.5625, -6.25, -5.9375, -5.625,
                        -5.3125, -5, -4.6875, -4.375, -4.0625,
                        -3.75, -3.4375, -3.125, -2.8125, -2.5,
                        -2.1875, -1.875, -1.5625, -1.25, -0.9375,
                        -0.625, -0.3125, 0, 0.3125, 0.625,
                        0.9375, 1.25, 1.5625, 1.875, 2.1875,
                        2.5, 2.8125, 3.125, 3.4375, 3.75,
                        4.0625, 4.375, 4.6875, 5, 5.3125,
                        5.625, 5.9375, 6.25, 6.5625, 6.875,
                        7.1875, 7.5, 7.8125, 8.125, 8.4375,
                        8.75, 9.0625, 9.375, 9.6875, 10,
                        10.3125, 10.625, 10.9375, 11.25, 11.5625,
                        11.875, 12.1875, 12.5, 12.8125, 13.125,
                        13.4375, 13.75, 14.0625, 14.375, 14.6875,
                        15, 15.3125, 15.625, 15.9375, 16.25,
                        16.5625, 16.875, 17.1875, 17.5, 17.8125,
                        18.125, 18.4375, 18.75, 19.0625, 19.375,
                        19.6875, 20, 20.3125, 20.625, 20.9375,
                        21.25, 21.5625, 21.875, 22.1875, 22.5,
                        22.8125, 23.125, 23.4375, 23.75, 24.0625,
                        24.375, 24.6875, 25, 25.3125, 25.625,
                        25.9375, 26.25, 26.5625, 26.875, 27.1875,
                        27.5, 27.8125, 28.125, 28.4375, 28.75,
                        29.0625, 29.375, 29.6875, 30, 30.3125,
                        30.625, 30.9375, 31.25, 31.5625, 31.875,
                        32.1875, 32.5, 32.8125, 33.125, 33.4375,
                        33.75, 34.0625, 34.375, 34.6875, 35,
                        35.3125, 35.625, 35.9375, 36.25, 36.5625,
                        36.875, 37.1875, 37.5, 37.8125, 38.125,
                        38.4375, 38.75, 39.0625, 39.375, 39.6875,
                        40, 40.3125, 40.625, 40.9375, 41.25,
                        41.5625, 41.875, 42.1875, 42.5, 42.8125,
                        43.125, 43.4375, 43.75, 44.0625, 44.375,
                        44.6875, 45, 45.3125, 45.625, 45.9375,
                        46.25, 46.5625, 46.875, 47.1875, 47.5,
                        47.8125, 48.125, 48.4375, 48.75, 49.0625,
                        49.375, 49.6875, 50, 50.3125, 50.625,
                        50.9375, 51.25, 51.5625, 51.875, 52.1875,
                        52.5, 52.8125, 53.125, 53.4375, 53.75,
                        54.0625, 54.375, 54.6875, 55, 55.3125,
                        55.625, 55.9375, 56.25, 56.5625, 56.875,
                        57.1875, 57.5, 57.8125, 58.125, 58.4375,
                        58.75, 59.0625, 59.375, 59.6875, 60,
                        60.3125, 60.625, 60.9375, 61.25, 61.5625,
                        61.875, 62.1875, 62.5, 62.8125, 63.125,
                        63.4375, 63.75, 64.0625, 64.375, 64.6875,
                        65, 65.3125, 65.625, 65.9375, 66.25,
                        66.5625, 66.875, 67.1875, 67.5, 67.8125,
                        68.125, 68.4375, 68.75, 69.0625, 69.375,
                        69.6875, 70, 70.3125, 70.625, 70.9375,
                        71.25, 71.5625, 71.875, 72.1875, 72.5,
                        72.8125 };
   const double fY[256] = { -0.00504652, -0.00463365, 0.000975704, 0.0022855, 0.00429291,
                        -0.00176253, 0.00076215, -0.000685271, 0.00362377, 0.000187928,
                        -0.0030486, 0.0011418, 0.00142654, -0.000220198, 4.55582e-05,
                        -0.00125475, 0.00199602, 0.0119286, 0.0180885, 0.0132432,
                        -0.000149013, -0.0103237, -0.0217939, -0.00890472, 0.00068622,
                        0.00656607, -0.00139712, -0.00578684, 0.00100892, 0.00533695,
                        0.0121659, 0.00929956, 0.00309701, 0.0101016, 0.00917618,
                        0.0167645, 0.00514712, 0.00496204, -0.00462415, -0.000523919,
                        0.000581816, 0.0014123, 0.00270786, 0.00610574, 0.00897686,
                        0.010206, 0.0187481, 0.00186314, -0.00197134, 0.00079537,
                        0.00236618, 0.00580677, 0.00207669, -0.00297267, -0.00257878,
                        -0.00517465, -0.00424925, -0.00914675, -0.00219439, -0.00178151,
                        0.00857822, 0.0053939, 0.00229025, -0.00733866, -0.00361333,
                        0.0219087, 0.079948, 0.239544, 0.515294, 0.832014,
                        1, 0.861997, 0.486517, 0.128083, -0.00606683,
                        0.0938052, 0.209775, 0.181116, 0.0409103, -0.0668585,
                        -0.0408429, 0.0493006, 0.080432, 0.0299241, -0.0110877,
                        0.00373767, 0.0369382, 0.026474, -0.00440586, -0.016754,
                        0.0117198, 0.0353864, 0.00949888, -0.0354519, -0.0376064,
                        -0.00280657, 0.0255961, 0.0190234, -0.0100864, -0.0063753,
                        0.0174858, 0.0345416, 0.00891517, -0.017912, -0.0173804,
                        -0.00064256, 0.000989941, -0.0206929, -0.0408904, -0.0362349,
                        -0.0140253, -0.00831626, -0.0153635, -0.0230467, -0.0210014,
                        -0.0106938, -0.0159188, -0.0138639, -0.014552, -0.00992978,
                        -0.00329537, -0.00478551, -0.00255031, -0.00712036, -0.0111542,
                        -0.00580107, -0.0013639, 0.00175874, -0.000191724, -0.0101101,
                        -0.0074573, -0.0189892, -0.0150883, -0.0145853, -0.0163886,
                        -0.00914675, 0.00061029, 0.00870161, 0.00415054, -0.0032147,
                        0.000439447, 0.00237092, 0.00341496, -0.00347096, -0.00748103,
                        0.00114655, 0.0103911, 0.0190946, 0.0128303, 0.00042521,
                        -0.00605734, -0.0013117, 0.00646167, 0.0010374, -0.00507025,
                        -0.00612378, 0.00180145, 0.00513763, 0.00690776, 0.00462036,
                        0.00527051, 0.0154594, 0.0204471, 0.00894364, -0.00184795,
                        -0.00543091, -0.00775153, -0.00323368, -0.00356588, 0.0044685,
                        0.00475798, 0.00334853, -0.00402146, 0.000278095, -0.00161542,
                        -0.00390756, -0.00505126, -0.0028825, 0.00296887, 0.00943719,
                        0.0127734, 0.0129063, 0.00112282, -0.000998483, -0.000713745,
                        0.000833335, 0.00238516, 0.000420464, -0.0015822, 0.00554576,
                        0.0141259, 0.0016923, 0.00111807, -0.00175304, -0.00184795,
                        -0.000315111, 0.00395122, 0.000396736, 0.000140471, -0.00202354,
                        0.0010374, 0.00042521, -0.00797458, 0.00692674, 0.0121469,
                        0.0162567, 0.016214, 0.00266041, -0.00721528, -0.00373672,
                        0.0121042, 0.0166695, 0.0169068, 0.00761011, 0.0060488,
                        0.00388004, -0.0011978, -0.00400722, -0.00938403, -0.0111399,
                        -0.00683562, -0.000296128, 0.00739656, 0.00385631, -0.00178626,
                        -0.00150627, 0.00617693, 0.00998293, 0.0161713, 0.0154784,
                        -0.00144457, -0.00320046, -0.00769459, -0.010243, -0.00879557,
                        -0.00641801, -0.000476463, 0.00280752, 0.00525153, 0.0030448,
                        -0.00122153, 0.00571186, 0.00412681, -0.00107916, -0.00507974,
                        -0.0104471, -0.00894269, -0.00853931, -0.00230828, -0.000922553,
                        -0.00430145, -0.00410688, -0.00989656, -0.00451026, -0.00672173,
                        -0.00313402 };
   const double fB[256] = { -0.0230442, 0.017661, 0.0102133, 0.00790953, -0.0100063,
                        -0.00674559, 0.00309335, 0.00471388, 0.00552269, -0.0184219,
                        0.00411025, 0.0111381, -0.00570138, -0.0014078, -0.00192484,
                        -0.000824528, 0.0239474, 0.0315957, 0.00415761, -0.0356065,
                        -0.0368115, -0.0433893, 0.00257784, 0.0466998, 0.026432,
                        -0.00390799, -0.0308, 0.00852019, 0.0198173, 0.018999,
                        0.0112938, -0.0261331, 0.006177, 0.00912444, 0.0156852,
                        -0.00790176, -0.0227571, -0.014373, -0.013555, 0.0159279,
                        -0.000179235, 0.00337678, 0.00708218, 0.0133515, -0.000306009,
                        0.0272348, -0.0148287, -0.0480111, 0.0079663, 0.00589534,
                        0.0100925, 0.0018441, -0.020248, -0.00513489, -0.00390505,
                        -0.00038391, -0.0105958, 0.00463487, 0.011783, 0.0189394,
                        0.0158765, -0.0135615, -0.021995, -0.0206911, 0.0480851,
                        0.109126, 0.3176, 0.709772, 1.02264, 0.887386,
                        0.0809927, -0.923521, -1.31635, -0.856653, 0.0141614,
                        0.470941, 0.174151, -0.329367, -0.47778, -0.140063,
                        0.2532, 0.242389, -0.0585167, -0.194336, -0.0427286,
                        0.11386, 0.0483362, -0.0889357, -0.089496, 0.0319304,
                        0.116581, 0.00229349, -0.147076, -0.0940359, 0.0710092,
                        0.123394, 0.0421598, -0.0824651, -0.0548512, 0.0580426,
                        0.0873738, -0.0147352, -0.110711, -0.0459751, 0.0421735,
                        0.0430671, -0.0380863, -0.0832053, -0.0311435, 0.0585762,
                        0.0547433, -0.00953079, -0.0294676, -0.0140115, 0.0313905,
                        0.00703736, -0.0107471, 0.00551833, 0.00179456, 0.0250712,
                        0.00598481, 0.000374659, -0.000330814, -0.021466, 0.00359793,
                        0.0197395, 0.0114307, 0.00711191, -0.0286255, -0.00655101,
                        -0.0149201, -0.0190081, 0.017695, -0.00949388, 0.0077976,
                        0.0305132, 0.0333392, 0.00747453, -0.0292509, -0.00486763,
                        0.0130949, 0.00610998, -0.00896987, -0.0263126, 0.00961885,
                        0.0321654, 0.0332918, 0.00696836, -0.0377484, -0.0352008,
                        -0.00276997, 0.0296064, 0.00452691, -0.0251627, -0.0145823,
                        0.0147448, 0.0215714, 0.00707917, -0.000867471, -0.00857512,
                        0.0194504, 0.0348284, -0.0130691, -0.0451035, -0.0205492,
                        -0.0106953, 0.00665593, 0.00516498, 0.0128665, 0.0173101,
                        -0.00219771, -0.0192709, -0.00500112, 0.0097993, -0.0110981,
                        -0.00558934, 0.000471319, 0.0135446, 0.0223434, 0.0153506,
                        0.0103773, -0.0235569, -0.027995, 0.00205147, 0.0021581,
                        0.00690159, -1.4985e-05, -0.0108052, 0.00514921, 0.0394112,
                        -0.0119965, -0.0284186, 0.000795965, -0.00784048, 0.00209209,
                        0.0132763, 0.000474984, -0.00834247, -0.00368834, -0.000138854,
                        0.0128542, -0.0277701, 0.0117113, 0.0433398, 0.00809616,
                        0.0138429, -0.0244244, -0.0466693, -0.013819, 0.0405328,
                        0.0371549, 0.00674762, -0.0180405, -0.0215561, 2.76526e-05,
                        -0.0143633, -0.0121419, -0.0127869, -0.0152982, 0.0055058,
                        0.0177397, 0.0276357, 0.00834658, -0.0211586, -0.0118673,
                        0.0171471, 0.0197256, 0.0142469, 0.0192325, -0.0384204,
                        -0.0346628, -0.00224519, -0.0163565, 6.28463e-05, 0.00553562,
                        0.0145146, 0.0162696, 0.00897216, 0.0028305, -0.0180163,
                        0.00709318, 0.0152472, -0.0167381, -0.0134887, -0.0176899,
                        -0.00568335, 0.00333898, 0.0106418, 0.017784, -0.00865712,
                        -0.00229, -0.0127524, -0.0004134, 0.0105336, -0.0112425,
                        0.0476483 };
   const double fC[256] = { 0.103651, 0.026606, -0.0504387, 0.0430666, -0.100397,
                        0.110831, -0.0793467, 0.0845324, -0.0819442, 0.00532141,
                        0.0667816, -0.0442924, -0.00959401, 0.0233334, -0.024988,
                        0.0285089, 0.0507611, -0.0262864, -0.0615155, -0.0657298,
                        0.0618739, -0.0829228, 0.230018, -0.0888273, 0.0239701,
                        -0.121058, 0.0350034, 0.0908213, -0.0546706, 0.0520522,
                        -0.0767091, -0.043057, 0.146449, -0.137018, 0.158012,
                        -0.233491, 0.185953, -0.159124, 0.161742, -0.0673968,
                        0.015854, -0.00447474, 0.016332, 0.00372997, -0.0474341,
                        0.135565, -0.270168, 0.163984, 0.0151439, -0.021771,
                        0.0352019, -0.0615967, -0.00909789, 0.0574597, -0.0535242,
                        0.0647918, -0.0974699, 0.146208, -0.123334, 0.146234,
                        -0.156035, 0.0618336, -0.0888206, 0.092993, 0.127091,
                        0.0682394, 0.598879, 0.65607, 0.345103, -0.77791,
                        -1.80255, -1.41189, 0.154844, 1.31618, 1.47043,
                        -0.00873034, -0.940997, -0.670261, 0.195337, 0.88536,
                        0.373082, -0.407678, -0.55522, 0.120598, 0.364546,
                        0.136538, -0.346216, -0.0930545, 0.0912616, 0.297303,
                        -0.0264216, -0.339298, -0.138684, 0.308413, 0.219731,
                        -0.0521007, -0.207848, -0.190952, 0.279316, 0.081944,
                        0.0119158, -0.338665, 0.0315419, 0.175613, 0.106462,
                        -0.103603, -0.156088, 0.0117071, 0.154891, 0.132213,
                        -0.144478, -0.0611992, -0.00259849, 0.0520578, 0.0932287,
                        -0.171159, 0.114248, -0.0621989, 0.0502828, 0.0242023,
                        -0.0852786, 0.0673261, -0.0695836, 0.00195092, 0.0782537,
                        -0.0266008, 1.27079e-05, -0.0138328, -0.100527, 0.171165,
                        -0.197946, 0.184864, -0.0674142, -0.0195902, 0.0749229,
                        -0.00223315, 0.0112763, -0.0940431, -0.0234781, 0.101504,
                        -0.0440244, 0.0216726, -0.0699281, 0.0144313, 0.100549,
                        -0.0284007, 0.0320054, -0.11624, -0.026853, 0.0350051,
                        0.0687735, 0.0348308, -0.115085, 0.0200782, 0.0137791,
                        0.0800677, -0.0582226, 0.0118475, -0.0372767, 0.0126122,
                        0.0770694, -0.0278597, -0.125412, 0.0229022, 0.0556714,
                        -0.0241387, 0.0796625, -0.0844336, 0.109078, -0.0948588,
                        0.0324339, -0.0870683, 0.132732, -0.0853704, 0.0184988,
                        -0.000870883, 0.020265, 0.0215696, 0.00658656, -0.0289637,
                        0.0130492, -0.121639, 0.107437, -0.0112882, 0.0116294,
                        0.00354983, -0.0256829, -0.00884586, 0.0599, 0.0497384,
                        -0.214243, 0.161692, -0.0682053, 0.0405687, -0.00878445,
                        0.0445738, -0.0855378, 0.057322, -0.0424288, 0.0537871,
                        -0.0122092, -0.117789, 0.244129, -0.142918, 0.030138,
                        -0.0117485, -0.110707, 0.0395234, 0.0655976, 0.108328,
                        -0.119138, 0.0218342, -0.101156, 0.0899066, -0.0208388,
                        -0.0252122, 0.0323208, -0.034385, 0.026349, 0.0402238,
                        -0.00107514, 0.0327421, -0.0944671, 5.05909e-05, 0.0296815,
                        0.0631645, -0.0549133, 0.0373813, -0.0214274, -0.163062,
                        0.175086, -0.0713495, 0.0261933, 0.0263486, -0.00883571,
                        0.0375683, -0.0319523, 0.00860047, -0.0282538, -0.0384559,
                        0.118806, -0.0927131, -0.0096399, 0.0200378, -0.0334818,
                        0.0719029, -0.0430315, 0.0664006, -0.0435455, -0.0410662,
                        0.061441, -0.0949207, 0.134406, -0.0993753, 0.0296918,
                        0.3125 };
   const double fD[256] = { -0.082181, -0.082181, 0.099739, -0.153028, 0.22531,
                        -0.202856, 0.174804, -0.177575, 0.0930833, 0.0655575,
                        -0.118479, 0.0370116, 0.0351226, -0.0515428, 0.0570634,
                        0.0237356, -0.082184, -0.0375777, -0.0044953, 0.136111,
                        -0.15445, 0.333803, -0.340101, 0.120317, -0.154697,
                        0.166465, 0.0595391, -0.155191, 0.113838, -0.137345,
                        0.0358956, 0.20214, -0.302365, 0.314698, -0.417603,
                        0.447407, -0.368083, 0.342258, -0.244415, 0.0888008,
                        -0.021684, 0.0221939, -0.0134422, -0.054575, 0.195199,
                        -0.432781, 0.463095, -0.158763, -0.0393759, 0.060771,
                        -0.103252, 0.0559988, 0.0709948, -0.118383, 0.126204,
                        -0.173079, 0.259923, -0.287511, 0.287539, -0.322421,
                        0.232394, -0.160698, 0.193935, 0.0363711, -0.0627749,
                        0.566015, 0.0610042, -0.331698, -1.19788, -1.09295,
                        0.416697, 1.67119, 1.23876, 0.164525, -1.57777,
                        -0.994418, 0.288785, 0.923305, 0.736024, -0.54643,
                        -0.832811, -0.157378, 0.720872, 0.260211, -0.243208,
                        -0.514938, 0.270039, 0.196604, 0.219778, -0.345306,
                        -0.333735, 0.213988, 0.476904, -0.0945943, -0.289954,
                        -0.16613, 0.0180226, 0.501619, -0.21053, -0.0746968,
                        -0.373952, 0.394887, 0.153676, -0.0737609, -0.22407,
                        -0.0559839, 0.178981, 0.152729, -0.0241897, -0.295137,
                        0.0888307, 0.0625074, 0.0583001, 0.0439156, -0.282013,
                        0.304434, -0.18821, 0.119981, -0.0278193, -0.11678,
                        0.162778, -0.146037, 0.0763035, 0.0813897, -0.111845,
                        0.0283877, -0.0147686, -0.0924736, 0.289805, -0.393719,
                        0.408331, -0.269097, 0.0510123, 0.100814, -0.0822998,
                        0.0144101, -0.112341, 0.0752693, 0.133315, -0.155231,
                        0.0700768, -0.0977075, 0.0899834, 0.0918594, -0.137547,
                        0.0644331, -0.158129, 0.0953467, 0.065982, 0.0360196,
                        -0.0362056, -0.15991, 0.144174, -0.00671904, 0.0707079,
                        -0.14751, 0.0747414, -0.0523991, 0.0532149, 0.0687543,
                        -0.111924, -0.104056, 0.158202, 0.0349538, -0.0851308,
                        0.110721, -0.175036, 0.206413, -0.217533, 0.135779,
                        -0.127469, 0.234453, -0.232642, 0.110794, -0.020661,
                        0.0225449, 0.0013916, -0.0159819, -0.0379202, 0.0448137,
                        -0.143667, 0.244347, -0.12664, 0.0244454, -0.00861818,
                        -0.0311816, 0.0179595, 0.0733289, -0.0108391, -0.28158,
                        0.400997, -0.245224, 0.116026, -0.0526433, 0.0569154,
                        -0.138786, 0.152384, -0.106401, 0.10263, -0.0703961,
                        -0.112618, 0.386046, -0.41285, 0.184593, -0.0446789,
                        -0.105556, 0.160246, 0.0278125, 0.0455793, -0.24263,
                        0.15037, -0.13119, 0.2038, -0.118128, -0.00466504,
                        0.0613685, -0.0711528, 0.064783, 0.0147997, -0.0440522,
                        0.0360717, -0.13569, 0.100819, 0.0316063, 0.0357153,
                        -0.12595, 0.0984476, -0.0627293, -0.151077, 0.360691,
                        -0.262864, 0.104046, 0.00016562, -0.0375299, 0.0494977,
                        -0.0741553, 0.0432562, -0.0393112, -0.0108823, 0.167746,
                        -0.22562, 0.0886114, 0.0316563, -0.0570876, 0.11241,
                        -0.122597, 0.116728, -0.117276, 0.00264462, 0.109341,
                        -0.166786, 0.244615, -0.249366, 0.137672, 0.137672,
                        0.145032 };
   int klow=0;
   if(x<=fXmin) return 0;
   else if(x>=fXmax) return 0;
   else {
     if(fKstep) {
       // Equidistant knots, use histogramming
       klow = int((x-fXmin)/fDelta);
       if (klow < fNp-1) klow = fNp-1;
     } else {
       int khig=fNp-1, khalf;
       // Non equidistant knots, binary search
       while(khig-klow>1)
         if(x>fX[khalf=(klow+khig)/2]) klow=khalf;
         else khig=khalf;
     }
   }
   // Evaluate now
   double dx=x-fX[klow];
   double val = (fY[klow]+dx*(fB[klow]+dx*(fC[klow]+dx*fD[klow])));
   return val;
}
*/

/*
double wfSim::getSignalAmplitude(){
  
  Int_t i = 0;
  Int_t maxNofIT = 10000;
  
  double x;
  double y;
  
  double val = -999.0;
  double valt = -999.0;
  
  while (val == -999.0) {
    i++;
    if(i>maxNofIT){
      cout<<" _Warning_ : i>maxNofIT, nIT = "<<i<<endl;
      // assert(0);
    }
    
    x = _rnd->Uniform( usbConst::amplSinglePEMin, usbConst::amplSinglePEMax);
    y = _rnd->Uniform(0.0,530.0);
    
    valt = amplDistSplineShape(x);
    if(valt>y){
      val = x;
      //cout<<" --> val = "<<val<<endl;
    }
  }
  
  //cout<<" val = "<<val<<endl;
  
  return val;//V
}
*/

/* 
double wfSim::amplDistSplineShape(double x) {
  const int fNp = 125, fKstep = 0;
  const double fDelta = -1, fXmin = -0.1932, fXmax = 1.4932;
  const double fX[125] = { -0.1932, -0.1796, -0.166, -0.1524, -0.1388,
			   -0.1252, -0.1116, -0.098, -0.0844, -0.0708,
			   -0.0572, -0.0436, -0.03, -0.0164, -0.0028,
			   0.0108, 0.0244, 0.038, 0.0516, 0.0652,
			   0.0788, 0.0924, 0.106, 0.1196, 0.1332,
			   0.1468, 0.1604, 0.174, 0.1876, 0.2012,
			   0.2148, 0.2284, 0.242, 0.2556, 0.2692,
			   0.2828, 0.2964, 0.31, 0.3236, 0.3372,
			   0.3508, 0.3644, 0.378, 0.3916, 0.4052,
			   0.4188, 0.4324, 0.446, 0.4596, 0.4732,
			   0.4868, 0.5004, 0.514, 0.5276, 0.5412,
			   0.5548, 0.5684, 0.582, 0.5956, 0.6092,
			   0.6228, 0.6364, 0.65, 0.6636, 0.6772,
			   0.6908, 0.7044, 0.718, 0.7316, 0.7452,
			   0.7588, 0.7724, 0.786, 0.7996, 0.8132,
			   0.8268, 0.8404, 0.854, 0.8676, 0.8812,
			   0.8948, 0.9084, 0.922, 0.9356, 0.9492,
			   0.9628, 0.9764, 0.99, 1.0036, 1.0172,
			   1.0308, 1.0444, 1.058, 1.0716, 1.0852,
			   1.0988, 1.1124, 1.126, 1.1396, 1.1532,
			   1.1668, 1.1804, 1.194, 1.2076, 1.2212,
			   1.2348, 1.2484, 1.262, 1.2756, 1.2892,
			   1.3028, 1.3164, 1.33, 1.3436, 1.3572,
			   1.3708, 1.3844, 1.398, 1.4116, 1.4252,
			   1.4388, 1.4524, 1.466, 1.4796, 1.4932 };
  const double fY[125] = { 0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0,
			   0, 0, 0, 0, 34,
			   345, 463, 490, 522, 523,
			   525, 516, 491, 470, 440,
			   394, 357, 333, 302, 249,
			   213, 187, 145, 123, 107,
			   77, 59, 40, 35, 27,
			   20, 11, 7, 8, 6,
			   2, 2, 2, 4, 2,
			   1, 2, 1, 0, 0,
			   1, 0, 0, 0, 0,
			   0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0,
			   0, 1, 0, 0, 1,
			   0, 0, 0, 0, 0,
			   0, 0, 0, 0, 1,
			   0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0,
			   0, 0, 0, 0, 0 };
  const double fB[125] = { -1.45392e-06, 7.26958e-07, -1.45392e-06, 5.08871e-06, -1.89009e-05,
			   7.05149e-05, -0.000263159, 0.000982121, -0.00366532, 0.0136792,
			   -0.0510514, 0.190526, -0.711054, 2.65369, -9.9037,
			   36.9611, -137.941, 514.802, -1921.27, 14670.3,
			   19343.1, 2589.52, 2284.09, 1288.83, -159.988,
			   12.8912, -1435.69, -1770.12, -1630.9, -2956.27,
			   -3308.71, -2117.7, -1676.37, -3309.18, -3616.34,
			   -1857.82, -2628.86, -2626.74, -981.812, -1828.36,
			   -1851.81, -1352.64, -899.398, -343.885, -592.708,
			   -594.105, -560.282, -32.4142, 28.1739, -300.87,
			   -148.225, 11.4165, 102.559, 19.5246, -180.657,
			   41.3395, 15.2991, -102.536, -46.3325, 67.2775,
			   -2.18944, -58.5198, 15.6803, -4.20152, 1.12577,
			   -0.301546, 0.0804158, -0.0201176, 5.45841e-05, 0.0198993,
			   -0.0796517, 0.298707, -1.11518, 4.162, -15.5328,
			   57.9694, 4.24366, -74.944, 74.9441, -4.24407,
			   -57.9678, 15.527, -4.14014, 1.03357, 0.00586141,
			   -1.05701, 4.2222, -15.8318, 59.1049, 0.000412734,
			   -59.1066, 15.8376, -4.24366, 1.13709, -0.304681,
			   0.081639, -0.0218751, 0.00586142, -0.00157056, 0.000420831,
			   -0.000112761, 3.02143e-05, -8.0959e-06, 2.16929e-06, -5.81259e-07,
			   1.55748e-07, -4.17325e-08, 1.11822e-08, -2.99626e-09, 8.02846e-10,
			   -2.15122e-10, 5.76417e-11, -1.54451e-11, 4.13849e-12, -1.10891e-12,
			   2.9713e-13, -7.96158e-14, 2.1333e-14, -5.71617e-15, 1.53168e-15,
			   -4.10554e-16, 1.10534e-16, -3.1581e-17, 1.57905e-17, -3.1581e-17 };
  const double fC[125] = { 0.000160358, 0, -0.000160358, 0.000641434, -0.00240538,
			   0.00898007, -0.0335149, 0.12508, -0.466803, 1.74213,
			   -6.50173, 24.2648, -90.5574, 337.965, -1261.3,
			   4707.25, -17567.7, 65563.5, -244686, 1.46465e+06,
			   -1.12106e+06, -110826, 88368.7, -161550, 55019.3,
			   -42307.5, -64206.1, 39616.3, -29380, -68073.6,
			   42158.9, 45415.6, -12964.8, -107095, 84508.9,
			   44794.2, -101488, 101644, 19306.8, -81552.9,
			   79828.6, -43125, 76451.5, -35605, 17309.1,
			   -17411.9, 19898.9, 18914.9, -14459.9, -9734.47,
			   20958.3, -9219.99, 15921.6, -22027.1, 7307.84,
                        9015.45, -10930.2, 2265.87, 1866.73, 6486.95,
			   -11594.8, 7452.88, -1996.99, 535.094, -143.382,
			   38.432, -10.3466, 2.95446, -1.47121, 2.93038,
			   -10.2503, 38.0708, -142.033, 530.061, -1978.21,
			   7382.78, -11333.2, 5510.58, 5510.6, -11333.3,
			   7382.98, -1978.96, 532.846, -152.426, 76.8597,
			   -155.012, 543.19, -2017.75, 7527.8, -11873.7,
			   7527.61, -2017.02, 540.458, -144.815, 38.8032,
			   -10.3973, 2.78594, -0.746491, 0.200022, -0.0535956,
			   0.0143609, -0.00384799, 0.00103107, -0.000276273, 7.40273e-05,
			   -1.98355e-05, 5.31492e-06, -1.42413e-06, 3.81594e-07, -1.02248e-07,
			   2.73972e-08, -7.34106e-09, 1.96703e-09, -5.27064e-10, 1.41226e-10,
			   -3.78415e-11, 1.01396e-11, -2.7169e-12, 7.2799e-13, -1.95059e-13,
			   5.22481e-14, -1.39328e-14, 3.4832e-15, 1.90327e-29, 0.0136 };
  const double fD[125] = { -0.00393035, -0.00393035, 0.0196518, -0.0746767, 0.279055,
			   -1.04154, 3.88712, -14.5069, 54.1406, -202.056,
			   754.082, -2814.27, 10503, -39197.7, 146288,
			   -545954, 2.03753e+06, -7.60416e+06, 4.18955e+07, -6.33752e+07,
			   2.47606e+07, 4.88223e+06, -6.12545e+06, 5.30807e+06, -2.38546e+06,
			   -536729, 2.54466e+06, -1.69109e+06, -948372, 2.70178e+06,
                        79820.8, -1.43089e+06, -2.3071e+06, 4.69616e+06, -973400,
			   -3.58536e+06, 4.97874e+06, -2.01807e+06, -2.47205e+06, 3.95543e+06,
			   -3.01357e+06, 2.9308e+06, -2.74648e+06, 1.29691e+06, -851005,
			   914480, -24117.4, -818010, 115819, 752275,
			   -739665, 616216, -930116, 718993, 41853.1,
			   -488864, 323433, -9782.86, 113241, -443181,
			   466856, -231615, 62061, -16629.3, 4456.21,
			   -1195.56, 326.007, -108.472, 107.882, -323.056,
			   1184.34, -4414.31, 16472.9, -61477.3, 229436,
			   -458725, 412838, 0.446132, -412840, 458731,
			   -229459, 61563.8, -16795.9, 5619.76, -5683.14,
			   17112.8, -62768, 233959, -475527, 475523,
			   -233937, 62683.2, -16795.9, 4500.45, -1205.89,
			   323.118, -86.5792, 23.1988, -6.21611, 1.6656,
			   -0.446297, 0.119585, -0.0320427, 0.0085858, -0.00230056,
			   0.000616433, -0.000165173, 4.42579e-05, -1.18589e-05, 3.17757e-06,
			   -8.51428e-07, 2.2814e-07, -6.11298e-08, 1.63797e-08, -4.38892e-09,
			   1.17601e-09, -3.1511e-10, 8.44335e-11, -2.26238e-11, 6.06146e-12,
			   -1.62208e-12, 4.26863e-13, -8.53726e-14, -8.53726e-14, 0.00631178 };

  //old
  // int klow=0;
  //if(x<=fXmin) klow=0;
  //else if(x>=fXmax) klow=fNp-1;
  //else {
  //if(fKstep) {
  // Equidistant knots, use histogramming
  //klow = int((x-fXmin)/fDelta);
  //if (klow < fNp-1) klow = fNp-1;
  //} else {
  //int khig=fNp-1, khalf;
  // Non equidistant knots, binary search
  //while(khig-klow>1)
  //if(x>fX[khalf=(klow+khig)/2]) klow=khalf;
  //else khig=khalf;
  //}
  //}
  // Evaluate now
  //double dx=x-fX[klow];
  //return (fY[klow]+dx*(fB[klow]+dx*(fC[klow]+dx*fD[klow])));

  int klow=0;
  if(x<= usbConst::amplSinglePEMin) return 0.0;
  else if(x>= usbConst::amplSinglePEMax) return 0.0;
  else {
    if(fKstep) {
      //Equidistant knots, use histogramming
	klow = int((x-fXmin)/fDelta);
      if (klow < fNp-1) klow = fNp-1;
    } else {
      int khig=fNp-1, khalf;
      // Non equidistant knots, binary search
      while(khig-klow>1)
	if(x>fX[khalf=(klow+khig)/2]) klow=khalf;
	else khig=khalf;
    }
  }
  // Evaluate now
  double dx=x-fX[klow];
  return (fY[klow]+dx*(fB[klow]+dx*(fC[klow]+dx*fD[klow])));
  
}
*/
